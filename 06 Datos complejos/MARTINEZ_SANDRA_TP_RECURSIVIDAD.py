#1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial 
# de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario

#Definimos la funcion factorial solicitada con el parametro "n"
def factorial(n):

    # Determinamos el caso base para que el codigo no sea infinito. 
    # Con un condicional: si n es 0 o 1, el factorial es 1 por definici√≥n.
    if n == 0 or n == 1:
        # Retorna 1 porque el factorial de 0 y 1 es 1, y sirve como caso base para detener la recursi√≥n.
        return 1
    
# Caso recursivo: para calcular el factorial de n, multiplicamos n por el factorial de n-1.
# Esto significa que la funci√≥n se llama a s√≠ misma con un n√∫mero m√°s peque√±o,
# y as√≠ vamos descomponiendo el problema en partes m√°s simples hasta llegar al caso base.
    return n * factorial(n - 1)


# Pedimos al usuario que ingrese por teclado un n√∫mero entero positivo
numero_usuario = int(input("Ingrese un n√∫mero entero positivo:"))

# Recorremos todos los n√∫meros desde 1 hasta el n√∫mero ingresado por el usuario (inclusive)
for i in range(1, numero_usuario + 1):
# i representa el n√∫mero actual en la iteraci√≥n
# Para cada n√∫mero i, calculamos su factorial usando la funci√≥n recursiva factorial()
    resultado = factorial(i)
    
    # Luego podemos mostrar el resultado con un print
    print(f"El factorial de {i} es: {resultado}")

#****************************************************************************************************************************#

#2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa 
# hasta la posici√≥n que el usuario especifique.

#Definimos la funcion solicitada (la tom√© de un ejercicio de autoevaluacion)
def fibonacci_recursivo(pos):

    # Con un condicional, determinamos el caso base para que el codigo no sea infinito: si la posici√≥n es 0, devolvemos 0
    if pos == 0:
        return 0
    # Si la posici√≥n es 1, devolvemos 1
    elif pos == 1:
        return 1
    #Aqui comienzza el caso recursiovo: suma de los dos valores anteriores
    else:
        return fibonacci_recursivo(pos - 1) + fibonacci_recursivo(pos - 2)

# Pedimos al usuario la posici√≥n hasta donde quiere ver la serie mediante un mensaje por pantalla
posicion_usuario = int(input("Ingrese la posici√≥n hasta la que quiere ver la serie de Fibonacci: "))

# Mostramos la serie completa desde la posici√≥n 0 hasta la ingresada por el usuario
print("Serie de Fibonacci completa hasta la posici√≥n", posicion_usuario, ":")

# Recorremos desde la posici√≥n 0 hasta la posici√≥n que indic√≥ el usuario (inclusive)
for i in range(posicion_usuario + 1):
    # Calculamos el valor de Fibonacci en la posici√≥n i usando la funci√≥n recursiva
    valor = fibonacci_recursivo(i)
    # Mostramos por pantalla la posici√≥n y el valor correspondiente mediante un print
    print(f"Posici√≥n {i}: {valor}")
    
    #*************************************************************************************************************#
    
    #3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõ ùëö = ùëõ ‚àó ùëõ (ùëö‚àí1)
#Prueba esta funci√≥n en un algoritmo general.


# Definimos la funci√≥n recursiva para calcular la potencia
# base: el n√∫mero que se va a elevar
# exponente: la potencia a la que se eleva la base (entero no negativo)
def potencia_recursiva(base, exponente):

    # Caso base para cortar la recursividad: cualquier n√∫mero elevado a 0 es 1
    if exponente == 0:
        return 1

    # Caso recursivo: multiplicamos la base por la potencia con exponente reducido en 1
    else:
        return base * potencia_recursiva(base, exponente - 1)

# Pedimos al usuario que ingrese la base por teclado (puede ser decimal)
base_usuario = float(input("Ingrese la base (n√∫mero): "))

# Solicitamos al usuario que ingrese el exponente (entero no negativo)
exponente_usuario = int(input("Ingrese el exponente (entero no negativo): "))

# Validamos que el exponente sea un entero no negativo
if exponente_usuario < 0:
    print("Error: el exponente debe ser un entero no negativo.")
else:
    # Calculamos la potencia usando la funci√≥n recursiva
    resultado = potencia_recursiva(base_usuario, exponente_usuario)
    # Mostramos el resultado por pantalla
    print(f"{base_usuario} elevado a la {exponente_usuario} es: {resultado}")
    
    #*********************************************************************************************************************************#
    #Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y unos (1), en base 2. Para convertir un n√∫mero decimal a 
# binario, se puede seguir este procedimiento:
#1. Dividir el n√∫mero por 2.
#2. Guardar el resto (0 o 1).
#3. Repetir el proceso con el cociente hasta que llegue a 0.
#4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario.

# Definimos la funci√≥n recursiva que convierte un n√∫mero decimal a binario
# Recibe un n√∫mero entero positivo y devuelve una cadena de texto con la representaci√≥n binaria
def decimal_a_binario(numero):

    # Caso base: si el n√∫mero es 0, devolvemos una cadena vac√≠a para cortar la recursi√≥n
    if numero == 0:
        return ""

    # Caso recursivo:
    # Dividimos el n√∫mero entre 2 y guardamos el resto (0 o 1)
    resto = numero % 2
    # Hacemos la llamada recursiva con el cociente de la divisi√≥n entera
    cociente = numero // 2

    # Construimos la cadena binaria llamando recursivamente con el cociente y
    # agregando el resto al final (que ser√° el d√≠gito binario menos significativo)
    return decimal_a_binario(cociente) + str(resto)

# Pedimos al usuario un n√∫mero entero positivo
numero_usuario = int(input("Ingrese un n√∫mero entero positivo en decimal: "))

# Si el n√∫mero es 0, lo mostramos directamente para que no quede vac√≠o
if numero_usuario == 0:
    print("El n√∫mero en binario es: 0")
elif numero_usuario < 0:
    print("Error: debe ingresar un n√∫mero entero positivo.")
else:
    # Calculamos la representaci√≥n binaria usando la funci√≥n recursiva
    binario = decimal_a_binario(numero_usuario)
    # Mostramos el resultado por pantalla
    print(f"El n√∫mero {numero_usuario} en binario es: {binario}")
    
#***************************************************************************************************#

#5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba unacadena de texto sin espacios ni tildes, y devuelva True si 
# es un pal√≠ndromo o False si no lo es.
#Requisitos:
#La soluci√≥n debe ser recursiva.
#No se debe usar [::-1] ni la funci√≥n reversed()

# Definimos la funci√≥n recursiva que verifica si una palabra es pal√≠ndromo
# Recibe una cadena de texto (sin espacios ni tildes)
def es_palindromo(palabra):

    # len(palabra) devuelve la cantidad de caracteres que tiene la palabra
    # Caso base 1: si la palabra tiene 0 o 1 car√°cter, es pal√≠ndromo por definici√≥n
    if len(palabra) <= 1:
        return True  # Retornamos True porque una palabra vac√≠a o con un solo car√°cter es pal√≠ndromo

    # palabra[0] es el primer car√°cter de la palabra
    # palabra[-1] es el √∫ltimo car√°cter de la palabra (√≠ndice negativo accede desde el final)
    # Caso base 2: si el primer y √∫ltimo car√°cter son diferentes, NO es pal√≠ndromo
    if palabra[0] != palabra[-1]:
        return False  # Retornamos False porque si no coinciden, no es pal√≠ndromo

    # Caso recursivo: si el primer y √∫ltimo car√°cter son iguales,
    # verificamos el resto de la palabra quitando esos dos caracteres
    # palabra[1:-1] devuelve una nueva cadena desde el segundo hasta el pen√∫ltimo car√°cter (excluyendo los extremos)
    return es_palindromo(palabra[1:-1])

# Pedimos al usuario que ingrese una palabra sin espacios ni tildes
# input() muestra el mensaje y espera que el usuario escriba algo y presione Enter
# .lower() convierte la palabra a min√∫sculas para evitar problemas con may√∫sculas y min√∫sculas
palabra_usuario = input("Ingrese una palabra sin espacios ni tildes: ").lower()

# Llamamos a la funci√≥n es_palindromo con la palabra ingresada y guardamos el resultado
resultado = es_palindromo(palabra_usuario)

# Mostramos el resultado por pantalla usando print()
if resultado:
    print(f"La palabra '{palabra_usuario}' es un pal√≠ndromo.")
else:
    print(f"La palabra '{palabra_usuario}' NO es un pal√≠ndromo.")
    
#****************************************************************************************************************#

#6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
#Restricciones:
#No se puede convertir el n√∫mero a string.
#Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
#Ejemplos:
#suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
#suma_digitos(9) ‚Üí 9
#suma_digitos(305) ‚Üí 8 (3 + 0 + 5)

# Definimos la funci√≥n recursiva para sumar los d√≠gitos de un n√∫mero entero positivo
def suma_digitos(n):
    # Nuestro caso base: si el n√∫mero es menor que 10 (es un solo d√≠gito), devolvemos ese d√≠gito
    if n < 10:
        return n
    else:
        # Bloque recursivo:
        # Obtenemos el √∫ltimo d√≠gito usando el operador m√≥dulo %
        ultimo_digito = n % 10
        # Reducimos el n√∫mero dividi√©ndolo por 10 (divisi√≥n entera //)
        resto_numero = n // 10
        # Retornamos la suma del √∫ltimo d√≠gito m√°s la suma de los d√≠gitos del resto del n√∫mero (recursi√≥n)
        return ultimo_digito + suma_digitos(resto_numero)

# Pedimos al usuario que ingrese un n√∫mero entero positivo
numero_usuario = int(input("Ingrese un n√∫mero entero positivo: "))

# Calculamos la suma de los d√≠gitos usando la funci√≥n recursiva
resultado = suma_digitos(numero_usuario)

# Mostramos el resultado por pantalla
print(f"La suma de los d√≠gitos de {numero_usuario} es: {resultado}")

#****************************************************************************************************************************************#

#7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1), y as√≠ 
# sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque.
#Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total de bloques que necesita 
# para construir toda la pir√°mide.
#Ejemplos:
#contar_bloques(1) ‚Üí 1 (1)
#contar_bloques(2) ‚Üí 3 (2 + 1)
#contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1)


# Definimos la funci√≥n recursiva que calcular√° el total de bloques necesarios para la pir√°mide
def contar_bloques(n):
    # Caso base: si n es 1, solo hay un bloque, entonces devolvemos 1
    if n == 1:
        return 1
    
    # Parte recurisiva: sumamos los bloques del nivel actual (n) 
    # m√°s el total de bloques necesarios para los niveles superiores (n-1)
    else:
        return n + contar_bloques(n - 1)

# Solicitamos al usuario que ingrese el n√∫mero de bloques del nivel m√°s bajo
nivel_bajo = int(input("Ingrese la cantidad de bloques en el nivel m√°s bajo de la pir√°mide: "))

# Calculamos el total de bloques necesarios llamando a la funci√≥n recursiva
total_bloques = contar_bloques(nivel_bajo)

# Mostramos el resultado al usuario
print(f"Para construir la pir√°mide con {nivel_bajo} bloques en la base, se necesitan {total_bloques} bloques en total.")

#**************************************************************************************************************#
#8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un √∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y 
#y devuelva cu√°ntas veces  aparece ese d√≠gito dentro del n√∫mero.
# Funci√≥n recursiva que cuenta cu√°ntas veces aparece un d√≠gito en un n√∫mero entero positivo
# numero: el n√∫mero en el que buscamos el d√≠gito
# digito: el d√≠gito que queremos contar (de 0 a 9)
def contar_digito(numero, digito):
    # Caso base: cuando el n√∫mero es 0, no quedan m√°s d√≠gitos que contar
    if numero == 0:
        return 0
    
    # Obtenemos el √∫ltimo d√≠gito del n√∫mero usando el operador m√≥dulo (%)
    ultimo_digito = numero % 10
    
    # Comparamos si el √∫ltimo d√≠gito es igual al d√≠gito que buscamos
    if ultimo_digito == digito:
        # Si son iguales, sumamos 1 y seguimos con el resto del n√∫mero (dividido por 10)
        return 1 + contar_digito(numero // 10, digito)
    else:
        # Si no son iguales, no sumamos y seguimos con el resto del n√∫mero
        return contar_digito(numero // 10, digito)

# Pedimos al usuario que ingrese el n√∫mero entero positivo
numero_usuario = int(input("Ingrese un n√∫mero entero positivo: "))

# Pedimos al usuario que ingrese el d√≠gito que quiere contar
digito_usuario = int(input("Ingrese un d√≠gito (entre 0 y 9) para contar en el n√∫mero: "))

# Llamamos a la funci√≥n contar_digito y guardamos el resultado
resultado = contar_digito(numero_usuario, digito_usuario)

# Mostramos el resultado
print(f"El d√≠gito {digito_usuario} aparece {resultado} veces en el n√∫mero {numero_usuario}.")